From 8f4c51fe34dae3833bfe47ebcbc9413058a0c098 Mon Sep 17 00:00:00 2001
From: Eliseev Roman <roman.eliseev@auriga.com>
Date: Fri, 17 Nov 2023 02:01:55 +0300
Subject: [PATCH] Deleted Rpi platform dependences and PWM mode

---
 pypi/mh_z19/__init__.py | 43 ++---------------------------------------
 pypi/mh_z19/__main__.py | 19 ------------------
 2 files changed, 2 insertions(+), 60 deletions(-)

diff --git a/pypi/mh_z19/__init__.py b/pypi/mh_z19/__init__.py
index 49c25b1..a469397 100644
--- a/pypi/mh_z19/__init__.py
+++ b/pypi/mh_z19/__init__.py
@@ -7,27 +7,16 @@ import serial
 import time
 import subprocess
 import traceback
-import getrpimodel
 import struct
 import platform
 import os.path
 
-import RPi.GPIO as GPIO
-
 # setting
 version = "3.1.3"
-pimodel        = getrpimodel.model()
-pimodel_strict = getrpimodel.model_strict()
 retry_count    = 3
 
-# exception
-class GPIO_Edge_Timeout(Exception):
-  pass
-
-if os.path.exists('/dev/serial0'):
-  partial_serial_dev = 'serial0'
-elif pimodel == "3 Model B" or pimodel == "4 Model B" or pimodel_strict == "Zero W":
-  partial_serial_dev = 'ttyS0'
+if os.path.exists('/dev/ttyS4'):
+  partial_serial_dev = 'ttyS4'
 else:
   partial_serial_dev = 'ttyAMA0'
   
@@ -214,34 +203,6 @@ def detection_range_2000(serial_console_untouched=False):
   if not serial_console_untouched:
     start_getty()
 
-def read_from_pwm(gpio=12, range=5000):
-  CYCLE_START_HIGHT_TIME = 2
-  TIMEOUT = 2000 # must be larger than PWM cycle time.
-
-  GPIO.setmode(GPIO.BCM)
-  GPIO.setup(gpio,GPIO.IN)
-
-  # wait falling ¯¯|_ to see end of last cycle
-  channel = GPIO.wait_for_edge(gpio, GPIO.FALLING, timeout=TIMEOUT)
-  if channel is None:
-    raise GPIO_Edge_Timeout("gpio {} edge timeout".format(gpio))
-
-  # wait rising __|¯ to catch the start of this cycle
-  channel = GPIO.wait_for_edge(gpio,GPIO.RISING, timeout=TIMEOUT)
-  if channel is None:
-    raise GPIO_Edge_Timeout("gpio {} edge timeout".format(gpio))
-  else:
-    rising = time.time() * 1000
-
-  # wait falling ¯¯|_ again to catch the end of TH duration
-  channel = GPIO.wait_for_edge(gpio, GPIO.FALLING, timeout=TIMEOUT)
-  if channel is None:
-    raise GPIO_Edge_Timeout("gpio {} edge timeout".format(gpio))
-  else:
-    falling = time.time() * 1000
-
-  return {'co2': int(falling -rising - CYCLE_START_HIGHT_TIME) / 2 *(range/500)}
-
 def checksum(array):
   if p_ver == '2' and isinstance(array, str):
     array = [ord(c) for c in array]
diff --git a/pypi/mh_z19/__main__.py b/pypi/mh_z19/__main__.py
index 3c2830b..fec0597 100644
--- a/pypi/mh_z19/__main__.py
+++ b/pypi/mh_z19/__main__.py
@@ -55,23 +55,6 @@ parser.add_argument("--detection_range_2000",
                     action='store_true',
                     help='''Set detection range as 2000''')
 
-parser.add_argument("--pwm",
-                    action='store_true',
-                    help='''Read CO2 concentration from PWM, see also `--pwm_range` and/or `--pwm_gpio`''')
-
-parser.add_argument("--pwm_range",
-                    type=int,
-                    choices=[2000,5000,10000],
-                    default=5000,
-                    metavar="range",
-                    help='''with --pwm, use this to compute co2 concentration, default is 5000''')
-
-parser.add_argument("--pwm_gpio",
-                    type=int,
-                    default=12,
-                    metavar="gpio(BCM)",
-                    help='''with --pwm, read from this gpio pin on RPi, default is 12''')
-
 args = parser.parse_args()
 
 if args.serial_device is not None:
@@ -100,8 +83,6 @@ elif args.detection_range_5000:
 elif args.detection_range_2000:
   mh_z19.detection_range_2000(args.serial_console_untouched)
   print ("Set Detection range as 2000.")
-elif args.pwm:
-  print (mh_z19.read_from_pwm(gpio=args.pwm_gpio, range=args.pwm_range))
 elif args.version:
   print (mh_z19.version)
 elif args.all:
-- 
2.36.1.windows.1

