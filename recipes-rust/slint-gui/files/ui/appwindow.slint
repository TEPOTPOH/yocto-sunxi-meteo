import { Button, VerticalBox } from "std-widgets.slint";
import { StyleMetrics } from "std-widgets.slint";

struct Palette  {
    menuBar : brush,
    mainContent : brush,
    box : brush,
    lightDisplay : brush,
    pieChart : brush,
    roundButton : brush,
    weekdayBox : brush,
    text : brush,
    shadow : brush,
}

struct GaugeZonePalette {
    red: brush,
    green: brush,
    orange: brush,
    blue: brush
}

global Skin  {
    in property <bool> day: !StyleMetrics.dark-color-scheme;
    out property <Palette> palette : root.day ? {
       menuBar : #6D7BFB,
       mainContent :  #fbfbfb,
       box :   #ffffff,
       lightDisplay : #ffffff,
       pieChart : #ffffff,
       roundButton : #f7f7f7,
       weekdayBox : #f4f4f4,
       text : #000,
       shadow : #0001, // ### added alpha
    } : {
       menuBar : #2937A7,
       mainContent : #040404,
       box : #000000,
       lightDisplay : #000000,
       pieChart : #000000,
       roundButton : #0a0a0a,
       weekdayBox : #0c0c0c,
       text : #fff,
       shadow : #fff1, // ### added alpha
    };

    // From Skin::initHints in Skin.cpp
    out property <length> DefaultFont: 12px;
    out property <length> TinyFont: 9px;
    out property <length> SmallFont: 10px;
    out property <length> MediumFont: 15px;
    out property <length> LargeFont: 20px;
    out property <length> HugeFont: 27px; // (also, bold)
    out property <length> TitleFont: 10px; // (also, bold)

    out property <GaugeZonePalette> GaugeColor: {
        red: #d43232,
        green: #1dab3c,
        orange: #eeb539,
        blue: #3e41e2
    };
}


component BoxBase inherits Rectangle {
    background: Skin.palette.box;
    drop-shadow-offset-x: 6px;
    drop-shadow-offset-y: 6px;
    drop-shadow-blur: 6px;
    drop-shadow-color: Skin.palette.shadow;
}

component Box inherits BoxBase {
    in property <string> title;

    VerticalLayout {
        if (root.title != "") : Text {
            text <=> root.title;
            font-size: Skin.TitleFont;
            font-weight: 700;
        }
        spacing: 10px;
        padding: 15px;

        // @children
    }
}

component SpaceWeather inherits Box {
    title: "Space weather";
}
component Clouds inherits Box {
    title: "Clouds and precipitation";
}

component Outdoor inherits Box {
    title: "Outdoor";
}


component RG_FillBakground inherits Path {
    in property <float> thickness;
    in property <float> inner-radius;
    in property <float> fill_from;
    in property <float> fill_to;
    in property <color> fill_color: #aaaaaa40;
    in property <float> start : -0.25;
    in property <float> end : 0.25;

    fill: fill_color;

    viewbox-width: 100;
    viewbox-height: 50;

    private property <float> position_from: root.start + (root.end - root.start) * root.fill_from;
    private property <float> position_to: root.start + (root.end - root.start) * root.fill_to;

    MoveTo {
        y: 50 - 50 * cos(-position_from * 360deg);
        x: 50 - 50 * sin(-position_from * 360deg);
    }

    LineTo {
        y: 50 - root.inner-radius * cos(-position_from * 360deg);
        x: 50 - root.inner-radius * sin(-position_from * 360deg);
    }

    ArcTo {
        radius-x: root.inner-radius;
        radius-y: root.inner-radius;
        y: 50 - root.inner-radius*cos(-position_to * 360deg);
        x: 50 - root.inner-radius*sin(-position_to * 360deg);
        sweep: true;
    }

    LineTo {
        y: 50 - 50*cos(-position_to * 360deg);
        x: 50 - 50*sin(-position_to * 360deg);
    }

    ArcTo {
        radius-x: 50;
        radius-y: 50;
        y: 50 - 50 * cos(-position_from * 360deg);
        x: 50 - 50 * sin(-position_from * 360deg);
        sweep: false;
    }
}

component RG_DrawCursor inherits Path {
    in property <float> thickness;
    in property <float> inner-radius;
    in property <float> progress;
    in property <float> start : -0.25;
    in property <float> end : 0.25;
    in property <float> cursor_extra_len: (50 - root.inner-radius)/2;

    private property <float> position: root.start + (root.end - root.start) * root.progress;
    private property <float> cursor_base: 0.02; 
    private property <float> position1: root.start + (root.end - root.start) * (root.progress + cursor_base);
    private property <float> position2: root.start + (root.end - root.start) * (root.progress - cursor_base);

    fill: @linear-gradient(asin(position), #74747485, #000000);

    viewbox-width: 100;
    viewbox-height: 50;

    MoveTo {
        y: 50 - 50 * cos(-position * 360deg);
        x: 50 - 50 * sin(-position * 360deg);
    }

    LineTo {
        y: 50 - (root.inner-radius - cursor_extra_len) * cos(-position1 * 360deg);
        x: 50 - (root.inner-radius - cursor_extra_len) * sin(-position1 * 360deg);
    }

    MoveTo {
        y: 50 - 50 * cos(-position * 360deg);
        x: 50 - 50 * sin(-position * 360deg);
    }

    LineTo {
        y: 50 - (root.inner-radius - cursor_extra_len) * cos(-position2 * 360deg);
        x: 50 - (root.inner-radius - cursor_extra_len) * sin(-position2 * 360deg);
    }
}

component RoundGaugeWidget inherits Rectangle {
    in property <[{from: float, to: float, color: brush}]> color_zones;
    in property <float> progress;
    in property <float> thickness: 15;
    in property <float> inner-radius: 50 - root.thickness;
    in property <float> value_max;

    public pure function inbound(x: float) -> float {
        return Math.min(root.value_max, Math.max(0, x));
    }

    RG_FillBakground {
        width: 100%;
        height: 100%;
        thickness: root.thickness;
        inner-radius: root.inner-radius;
        fill_from: 0;
        fill_to: 1;
        fill_color: #d9d9d9;
    }

    for zone in color_zones: RG_FillBakground {
        width: 100%;
        height: 100%;
        thickness: root.thickness;
        inner-radius: root.inner-radius;
        fill_from: inbound(zone.from)/root.value_max;
        fill_to: inbound(zone.to)/root.value_max;
        fill_color: zone.color;
    }

    p := RG_DrawCursor {
        width: 100%;
        height: 100%;
        thickness: root.thickness;
        inner-radius: root.inner-radius;
        progress: inbound(root.progress)/root.value_max;
        animate progress {
            duration: 500ms;
            easing: ease-out-quart;
        }
    }
}

export global IndoorAdapter {
    in property <int> current_temp: 5;
    in property <int> current_rh: 90;
    in property <int> current_co2: 3000;
}

component IndoorData inherits HorizontalLayout {
    in property current-temp <=> IndoorAdapter.current_temp;
    in property current-rh <=> IndoorAdapter.current_rh;
    in property current-co2 <=> IndoorAdapter.current_co2;

    padding-left: 10px;
    padding-top: 25px;
    padding-right: 10px;
    padding-bottom: 5px;
    spacing: 10px;

    for item in [
        { string: "Temperature",
          value: current-temp,
          unit: "°C",
          value_max: 50,
          icon: @image-url("images/indoor-temperature.svg"),
          zones: [
            { from: 0, to: 18, color: Skin.GaugeColor.blue },
            { from: 18, to: 23, color: Skin.GaugeColor.green },
            { from: 23, to: 30, color: Skin.GaugeColor.orange },
            { from: 30, to: 50, color: Skin.GaugeColor.red },
          ],
        },
        { string: " Relative\nHumidity",
          value: current-rh,
          unit: "%",
          value_max: 100,
          icon: @image-url("images/humidity.svg"),
          zones: [
            { from: 0, to: 40, color: Skin.GaugeColor.red },
            { from: 40, to: 60, color: Skin.GaugeColor.green },
            { from: 60, to: 100, color: Skin.GaugeColor.orange },
          ],
        },
        { string: "CO2",
          value: current-co2,
          unit: "ppm",
          value_max: 2000,
          icon: @image-url(""),
          zones: [
            { from: 400, to: 650, color: Skin.GaugeColor.green },
            { from: 650, to: 1000, color: Skin.GaugeColor.orange },
            { from: 1000, to: 2000, color: Skin.GaugeColor.red },
          ],
        },
    ] : VerticalLayout {
        padding-top: 20px;
        horizontal-stretch: 1;
        min-width: 150px;

        Text {
            font-size: Skin.LargeFont;
            text: item.string;
            vertical-alignment: center;
            horizontal-alignment: center;
            max-height: 45px;
        }

        pc := RoundGaugeWidget {
            vertical-stretch: 0;
            color_zones: item.zones;
            progress: item.value;
            value_max: item.value_max;

            VerticalLayout {
                spacing: 0px;
                Rectangle {
                    vertical-stretch: 10;
                }
                Rectangle {
                    img := Image {
                        source: item.icon;
                        height: root.width/3/5; // TODO: make it more reliable
                        colorize: #000000;
                    }
                    min-height: img.height;
                }
                value_text := Text {
                    vertical-alignment: center;
                    horizontal-alignment: center;
                    text: (item.unit != "°C" ? ""
                        : item.value > 0 ? "+" : "-") + item.value;
                    font-size: Skin.LargeFont;
                    vertical-stretch: 1;
                }
            }
            Text {
                y: value_text.y + value_text.height*5/6;
                text: item.unit;
                font-size: Skin.MediumFont;
                horizontal-alignment: center;
                color: #7d7d7d;
            }

            HorizontalLayout {
                y: pc.y + 35px;
                max-height: 30px;
                Text {
                    text: 0;
                    font-size: Skin.MediumFont;
                    horizontal-alignment: left;
                    vertical-alignment: top;
                    color: #7d7d7d;
                }
                Text {
                    text: item.value-max;
                    font-size: Skin.MediumFont;
                    horizontal-alignment: right;
                    vertical-alignment: top;
                    color: #7d7d7d;
                }
            }
        }

        // TODO: daily chart widget
        Rectangle {
            vertical-stretch: 0;
            min-height: pc.min-height;
            // max-height: 150px;
            // border-width: 1px;
            // border-color: #000000;
        }
    }
    @children
}

component Indoor inherits Box {
    title: "Indoor";

    IndoorData {
    }
}


component MainContent {
    min-width: 800px;
    min-height: 500px;
    max-width: 1024px;
    max-height: 600px;
    preferred-width: 1024px;
    preferred-height: 600px;

    Rectangle {
        background: #d7d7d7;
        animate background {
            duration: 500ms;
        }
    }

    GridLayout {
        spacing: 2px;
        padding-left: 6px;
        padding-top: 6px;
        padding-right: 6px;
        padding-bottom: 6px;

        SpaceWeather {
            row: 0; col: 0;
            max-width: root.max-width/2;
            max-height: root.max-height/2;
        }
        Clouds {
            row: 0; col: 1;
            max-width: root.max-width/2;
            max-height: root.max-height/2;
        }

        Outdoor {
            row: 1; col: 0;
            max-width: root.max-width/2;
            max-height: root.max-height/2;
        }

        Indoor {
            row: 1; col: 1;
            max-width: root.max-width/2;
            max-height: root.max-height/2;
        }
    }
}

export component AppWindow inherits Window {
    always-on-top: true;
    background: #7c7c7c;
    min-width: 800px;
    min-height: 500px;
    max-width: 1024px;
    max-height: 600px;
    preferred-width: 1024px;
    preferred-height: 600px;

    no-frame: true;

    MainContent {}
}
